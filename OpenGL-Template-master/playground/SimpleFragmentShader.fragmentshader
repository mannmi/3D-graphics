#version 330 core

// Ouput data
out vec3 color;

// Input data
in vec3 LightDirection_cameraspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec2 UV;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;


void main()
{
     // Normal of the computed fragment, in camera space
     vec3 n = normalize( Normal_cameraspace );
     // Direction of the light (from the fragment to the light)
     vec3 l = normalize( LightDirection_cameraspace );
     float cosTheta = clamp( dot( n,l ), 0,1 );
     vec3 MaterialDiffuseColor = vec3(0.9,0.0,0.0);
     vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
     // Eye vector (towards the camera)
     vec3 E = normalize(EyeDirection_cameraspace);
     // Direction in which the triangle reflects the light
     vec3 R = reflect(-l,n);
     // Cosine of the angle between the Eye vector and the Reflect vector,
     float cosAlpha = clamp( dot( E,R ), 0,1 );
     vec3 MaterialSpecularColor = MaterialDiffuseColor * pow(cosAlpha,5);
	 // Output color = metal
	 color = MaterialAmbientColor + MaterialSpecularColor + MaterialDiffuseColor * cosTheta;
}